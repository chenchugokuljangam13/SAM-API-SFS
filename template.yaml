AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  actual-leave-jcg

  Sample SAM Template for actual-leave-jcg
Globals:
  Function:
    Timeout: 15
    LoggingConfig:
      LogFormat: JSON
Parameters:
  MySecretValue:
    Type: String
    NoEcho: true 

Resources:
  LeaveTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: LeaveTable-test
      AttributeDefinitions:
        - AttributeName: leaveID
          AttributeType: S
      KeySchema:
        - AttributeName: leaveID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  RestApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowStartExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref leaveStateMachine
        - PolicyName: PermissionsForLambdaInvocation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - logs:*
                Resource: '*'
  
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: LeaveAPi
      StageName: dev
      Cors: "'*'"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: api/swagger.yaml
      Auth:
        DefaultAuthorizer: LeaveAuthorizer
        Authorizers:
          LeaveAuthorizer:
            FunctionArn: !GetAtt LeaveAuthorizerFunction.Arn
            Identity:
              Header: Authorization
              
  LeaveAuthorizerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - lambdas/authorizer.ts
        External:
          - 'aws-lambda'
    Properties:
      CodeUri: ./
      Handler: authorizer.authorizerHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          JWT_SECRET: !Ref MySecretValue
      
  
  LeaveSendEmailToApproverFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: sendEmailToApprover.sendEmailToApproverHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - AmazonSESFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref LeaveTable
      Environment:
        Variables:
          SES_EMAIL: "gokul.jangam@antstack.io"
          TABLE_NAME: !Ref LeaveTable
          API_URL: !Ref LeaveAPIProcess
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - lambdas/sendEmailToApprover.ts
        External:
          - '@aws-sdk/client-ses'
          - 'aws-sdk'
          - '@aws-sdk/client-dynamodb'
          - '@aws-sdk/lib-dynamodb'
  LeaveAPIProcess:
    Type: AWS::Serverless::Api
    Properties:
      Name: LeaveManagementAPI
      StageName: dev
      Cors: "'*'"
  LeaveProcessApprovalFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: processApproval.processApprovalHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - states:SendTaskSuccess
                - states:SendTaskFailure
              Resource: "*"
      Events:
        ProcessApproval:
          Type: Api
          Properties:
            Path: /process-approval
            Method: get
            RestApiId: !Ref LeaveAPIProcess
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - lambdas/processApproval.ts
        External:
          - '@aws-sdk/client-sfn'

  NotifyUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: notifyUser.notifyUserHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - AmazonSESFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref LeaveTable
      Environment:
        Variables:
          SES_EMAIL: "gokul.jangam@antstack.io"
          TABLE_NAME: !Ref LeaveTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - lambdas/notifyUser.ts
        External:
          - '@aws-sdk/client-ses'
          - '@aws-sdk/client-dynamodb'
          - '@aws-sdk/lib-dynamodb'
  
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - logs:*
                Resource: '*' 

  leaveStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: leaveStateMachine
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Leave Management State Machine",
          "StartAt": "SendEmailToApprover",
          "States": {
            "SendEmailToApprover": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "Parameters": {
                "FunctionName": "${LeaveSendEmailToApproverFunction.Arn}",
                "Payload": {
                  "userEmail.$": "$.employeeEmail",
                  "startDate.$": "$.startDate",
                  "endDate.$": "$.startDate",
                  "leaveType.$": "$.leaveType",
                  "approverEmail.$": "$.approverEmail",
                  "taskToken.$": "$$.Task.Token"
                }
              },
              "ResultPath": "$.approvalResult",
              "TimeoutSeconds": 600,
              "Next": "NotifyUser"
            },
            "NotifyUser": {
              "Type": "Task",
              "Resource": "${NotifyUserFunction.Arn}",
              "Parameters": {
                "userEmail.$": "$.employeeEmail",
                "startDate.$": "$.startDate",
                "endDate.$": "$.startDate",
                "leaveType.$": "$.leaveType",
                "approvalStatus.$": "$.approvalResult.approvalStatus",
                "leaveID.$": "$.approvalResult.leaveID"
              },
              "End": true
            }
          }
        }

Outputs:
  StartLeaveWorkflowApiEndpoint:
    Description: "API Gateway endpoint URL for Leave Management"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
    Export:
      Name: StartLeaveWorkflowApiEndpoint