AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  actual-leave-jcg

  Sample SAM Template for actual-leave-jcg
Globals:
  Function:
    Timeout: 15
    LoggingConfig:
      LogFormat: JSON

Resources:
  LeaveTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: LeaveTable-test
      AttributeDefinitions:
        - AttributeName: leaveID
          AttributeType: S
      KeySchema:
        - AttributeName: leaveID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  RestApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowStartExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref leaveStateMachine
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: LeaveAPi
      StageName: dev
      Cors: "'*'"
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "LeaveAPi"
          version: "1.0"
        paths:
          /apply-leave:
            post:
              request:
                - application/json
              response:
                - application/json
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
                httpMethod: POST
                type: aws
                credentials:
                  Fn::GetAtt: [RestApiRole, Arn]
                requestTemplates:
                  application/json: |
                    {
                      "input": "$util.escapeJavaScript($input.body)",
                      "stateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:leaveStateMachine"
                    }
                responses:
                  default:
                    statusCode: "200"
              responses:
                "200":
                  description: "200 response"

      Auth:
        DefaultAuthorizer: LeaveAuthorizer
        Authorizers:
          LeaveAuthorizer:
            FunctionArn: !GetAtt LeaveAuthorizerFunction.Arn
            Identity:
              Header: Authorization
              
  LeaveAuthorizerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - lambdas/authorizer.ts
        External:
          - 'aws-lambda'
    Properties:
      CodeUri: ./
      Handler: authorizer.authorizerHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          JWT_SECRET: 'bXlzZWNyZXQta2V5LTI1Ni1iaXRzLXNob3VsZC1iZS1zZWN1cmUhIQ'
  
  LeaveSendEmailToApproverFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: sendEmailToApprover.sendEmailToApproverHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - AmazonSESFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref LeaveTable
      Environment:
        Variables:
          SES_EMAIL: "gokul.jangam@antstack.io"
          TABLE_NAME: !Ref LeaveTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - lambdas/sendEmailToApprover.ts
        External:
          - '@aws-sdk/client-ses'
          - 'aws-sdk'
          - '@aws-sdk/client-dynamodb'
          - '@aws-sdk/lib-dynamodb'
  LeaveProcessApprovalFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: processApproval.processApprovalHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - states:SendTaskSuccess
                - states:SendTaskFailure
              Resource: "*"
      Events:
        ProcessApproval:
          Type: Api
          Properties:
            Path: /process-approval
            Method: GET
            RestApiId: !Ref RestApi
            Auth:
              Authorizer: NONE 
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - lambdas/processApproval.ts
        External:
          - '@aws-sdk/client-sfn'

  RejectedNotifyUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: rejectedNotifyUser.notifyUserHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - AmazonSESFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref LeaveTable
      Environment:
        Variables:
          SES_EMAIL: "gokul.jangam@antstack.io"
          TABLE_NAME: !Ref LeaveTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - lambdas/rejectedNotifyUser.ts
        External:
          - '@aws-sdk/client-ses'
          - '@aws-sdk/client-dynamodb'
          - '@aws-sdk/lib-dynamodb'
  ApprovedNotifyUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: approvedNotifyUser.notifyUserHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - AmazonSESFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref LeaveTable
      Environment:
        Variables:
          SES_EMAIL: "gokul.jangam@antstack.io"
          TABLE_NAME: !Ref LeaveTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - lambdas/approvedNotifyUser.ts
        External:
          - '@aws-sdk/client-ses'
          - '@aws-sdk/client-dynamodb'
          - '@aws-sdk/lib-dynamodb'
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - logs:*
                Resource: '*' 
  leaveStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: leaveStateMachine
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Leave Management State Machine",
          "StartAt": "SendEmailToApprover",
          "States": {
            "SendEmailToApprover": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "Parameters": {
                "FunctionName": "${LeaveSendEmailToApproverFunction.Arn}",
                "Payload": {
                  "input.$": "$",
                  "taskToken.$": "$$.Task.Token"
                }
              },
              "ResultPath": "$.approvalResult",
              "TimeoutSeconds": 600,
              "Next": "CheckApprovalStatus"
            },
            "CheckApprovalStatus": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.approvalResult.approvalStatus",
                  "StringEquals": "Approved",
                  "Next": "ApprovedNotifyUser"
                },
                {
                  "Variable": "$.approvalResult.approvalStatus",
                  "StringEquals": "Rejected",
                  "Next": "RejectedNotifyUser"
                }
              ],
              "Default": "FailState"
            },
            "RejectedNotifyUser": {
              "Type": "Task",
              "Resource": "${RejectedNotifyUserFunction.Arn}",
              "Parameters": {
                "leaveID.$": "$.leaveID",
                "userEmail.$": "$.userEmail",
                "leaveDetails.$": "$.leaveDetails",
                "approvalStatus.$": "$.approvalResult.approvalStatus"
              },
              "End": true
            },
            "ApprovedNotifyUser": {
              "Type": "Task",
              "Resource": "${ApprovedNotifyUserFunction.Arn}",
              "Parameters": {
                "leaveID.$": "$.leaveID",
                "userEmail.$": "$.userEmail",
                "leaveDetails.$": "$.leaveDetails",
                "approvalStatus.$": "$.approvalResult.approvalStatus"
              },
              "End": true
            },
            "FailState": {
              "Type": "Fail",
              "Cause": "Approval process failed or timed out"
            }
          }
        }



Outputs:
  StartLeaveWorkflowApiEndpoint:
    Description: "API Gateway endpoint URL for Leave Management"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
